//STACK 1

#include<iostream>
using namespace std;
#define MAX 1000
class Stack
{
public:
    int top;
    int a[MAX];
    Stack()
    {
        top=-1;
    }
public:
    void push(int);
    void pop();
    void peek();
    void isEmpty();
    void display();
};
void Stack::push(int x)
{
    if(top>=(MAX - 1))
    {
        cout<<"Stack Overflow";
    }
    else
    {
        a[++top]=x;
        cout<<x<<" is Pushed into Stack\n";
    }
}
void Stack::pop()
{
    if(top<0)
    {
        cout<<"Stack Underflow";
    }
    else
    {
        int x=a[top];
        top--;
        cout<<x<<" is Popped from the Stack\n";

    }
}
    void Stack::peek()
    {

            if(top<0)
            {
                cout<<"Stack is empty";
            }
            else
            {
                int x=a[top];
                cout<<"The top Element of Stack is "<<x<<"\n";
            }

    }
    void Stack::isEmpty()
    {
        if(top<0)
        {
            cout<<"the Stack is Empty\n";
        }
        else
        {
            cout<<"The Stack is not empty\n";
        }
    }
    void Stack::display()
    {
        if(top>=0)
        {
            cout<<"\nStack elements are: \n";
            for(int i=top;i>=0;i--)
                cout<<a[i]<<" ";
        }
        else
            cout<<"Stack is empty";
    }
int main()
{

    Stack s;
    int flag=1, n, ch,n2;
    while(flag == 1)
    {
        cout<<"Enter the element: ";
        cin>>n;
        s.push(n);
        cout<<"\nDo u want to enter again: (1 for Yes, 0 for no) : ";
        cin>>ch;
        if(ch==0)
            flag=0;
    }
    cout<<"How many  elements u want to pop: ";
    cin>>n2;
    for(int i=0;i<n2;i++)
        s.pop();
    s.display();
    s.peek();
    s.isEmpty();
}




//STACK PALINDROME

int top = -1, front = 0;
int stack[MAX];
void push(char);
void pop();
 
void main()
{
    int i, choice;
    char s[MAX], b;
            printf("Enter the String\n");
            scanf("%s", s);
            for (i = 0;s[i] != '\0';i++)
            {
                b = s[i];
                push(b);
            }
            for (i = 0;i < (strlen(s) / 2);i++)
            {
                if (stack[top] == stack[front])
                {
                    pop();
                    front++;
                }
                else
                {
                    printf("%s is not a palindrome\n", s);
                    break; 
                }
            }
            if ((strlen(s) / 2)  =  =  front)
                printf("%s is palindrome\n",  s);
            front  =  0;
            top  =  -1;
}
 
void push(char a)
{
    top++;
    stack[top]  =  a;
}
 
void pop()
{
    top--;
}


.,.,.,,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,

// C++ implementation of the approach
#include <bits/stdc++.h>
using namespace std;
 
// Function that returns true
// if string is a palindrome
bool isPalindrome(string s)
{
    int length = s.size();
 
    // Creating a Stack
    stack<char> st;
 
    // Finding the mid
    int i, mid = length / 2;
 
    for (i = 0; i < mid; i++) {
        st.push(s[i]);
    }
 
    // Checking if the length of the string
    // is odd, if odd then neglect the
    // middle character
    if (length % 2 != 0) {
        i++;
    }
   
    char ele;
    // While not the end of the string
    while (s[i] != '\0')
    {
         ele = st.top();
         st.pop();
 
    // If the characters differ then the
    // given string is not a palindrome
    if (ele != s[i])
        return false;
        i++;
    }
 
return true;
}
 
// Driver code
int main()
{
    string s = "madam";
 
    if (isPalindrome(s)) {
        cout << "Yes";
    }
    else {
        cout << "No";
    }
 
    return 0;
}
 
 
 
 
//./,/.,/.,/.,/.,/.,/.,/.,/.,/.,/.,/.,/.,/./.,/.,/.,/./././,/,/.,/

